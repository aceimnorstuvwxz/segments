#!python
#-*-coding:utf-8-*-

import sys,random,datetime,os
from PIL import Image

'''
Copyright (C), 2014, CHEN BINGFENG
Description: 从bmp/png图片生成资源代码(bitmap.c imgRes.c/h)
Author: iichenbf@gmail.com
History:
-------------------------------------------------------------
2014年7月7日 支持子目录->v1.1
2014年7月10日 增加imgRes.c/h->v1.2
2014年7月16日 改变量命名->v1.3
2014年7月17日 解决Linux下运行异常->v1.4
2014年7月22日 加ifdef字段到bitmap.c->v1.5
2014年8月15日 按image.cfg寻找文件->v1.6
-------------------------------------------------------------
如何运行本脚本？
1）需要python2.6/2.7，同时安装相应版本的Pillow（一个图片处理库/PIL)
2）在windows/linux均可，但建议始终选择某一个，因为文件的遍历顺序与系统有关。

资源文件名称的约定？
1）图片请使用aaa_bbb.png的命名风格，即小写字母和下划线组合。
2）注意防止图片名称重复，因为所有图片的变量名将在同一域下。
3）图片名到代码中的变量名之关系：aaa_bbb.png（图片名） -> bmAaaBbb（变量名）

图片中的透明部分？
（半）透明部分将与定义的底色（CFG_TRANS_COLOR）用aplha通道混合。
'''

gFns = []

CFG_TRANS_COLOR = (0x2d,0x2d,0x2d)

gHeader = '''/***************************************************************************************
 Copyright (C), 2014, CHEN BINGFENG

 File name:     bitmap.c

 Description:   bitmap source.

 Author:        iichenbf@gmail.com

 History:
 ----------------------
 V0.1, 2014-05-14, chen bingfeng    Create file.
***************************************************************************************/
#ifndef __BITMAP_C__
#define __BITMAP_C__

#include "../common.h"
'''

gTailer = '''
#endif
'''

gLineHeader = '''
static const unsigned char img%s_data[] =
{'''

gLineTailer = '''
};
'''

gResHeader = '''
static const SOURCE_OBJ bitmapArray[] =
{
'''
gResLine = '''    {sizeof(img%s_data), "%s_ADDR_SPI_FLASH", img%s_data}%s
'''
gResTailer = '''
};'''


gDefHeader = '''/************************************************************
 * Copyright (C), 2014, CHEN BINGFENG
 *
 * File name: imgRes.c
 *
 * Description: images's definition
 *
 * Author: auto-generated by brelax.py
 ************************************************************/
#include "stdlib.h"

#include "GUI.h"

#include "srcAddr.h"

'''
gDefLine = '''
GUI_CONST_STORAGE GUI_BITMAP bm%s = {
  %d, /* XSize */
  %d, /* YSize */
  %d, /* BytesPerLine */
  16, /* BitsPerPixel */
  (unsigned char *)%s_ADDR_SPI_FLASH,  /* Pointer to picture data */
  NULL  /* Pointer to palette */
 ,GUI_DRAW_BMPSERIALFLASH
};
'''
gDecHeader = '''/************************************************************
 * Copyright (C), 2014, CHEN BINGFENG
 *
 * File name: imgRes.h
 *
 * Description: image resource declaration generated by brelax.py
 ************************************************************/
#ifndef __IMGRES_H__
#define __IMGRES_H__

#include "GUI.h"

#ifdef __cplusplus
 extern "C" {
#endif
'''
gDecLine = '''extern GUI_CONST_STORAGE GUI_BITMAP bm%s;
'''
gDecTailer = '''
#ifdef __cplusplus
}
#endif

#endif
'''

fOut = open("bitmap.c",'w')
fResC = open("imgRes.c",'w')
fResH = open("imgRes.h","w")

def degPixel(pixel,mode):
    """处理PIL取出的pixel到R,G,B"""
    global CFG_TRANS_COLOR
    if cmp(mode,"RGBA") == 0:
        #RGBA,需要与底色（CFG_TRANS_COLOR）混合
        r1,g1,b1,a1 = pixel
        a1 = (a1*1.0)/255
        r2,g2,b2 = CFG_TRANS_COLOR
        a2 = 1
        r12 = (r1*a1 + r2 - r2*a1)
        g12 = (g1*a1 + g2 - g2*a1)
        b12 = (b1*a1 + b2 - b2*a1)
        return int(r12),int(g12),int(b12)
    else:
        #RGB
        return pixel

def genMatrix4All(fn):
    """用PIL取图片的所有像素RGB值 及 长、宽"""
    _matrix = []
    _tmpLine = []
    _im = Image.open(fn)
    _w,_h = _im.size
    for j in range(_h):
        _tmpLine = []
        for i in range(_w):
            _tmpPixelRaw = _im.getpixel((i,j))
            _tmpPixel = degPixel(_tmpPixelRaw, _im.mode)
            _tmpLine.append(_tmpPixel)
        _matrix.append(_tmpLine)

    return _matrix,_w,_h


def toFnRaw(fnCl):
    """名字处理:aaa_bbb_ccc_ddd->AaaBbbCccDcc"""
    words = fnCl.split('_')
    res = ""
    for w in words:
        res = res + w[0:1].upper()+w[1:].lower()
    return res

def dealFn(fnFull):
    global gFns
    fn = os.path.basename(fnFull)
    print fnFull

    #check
    if cmp(fn[-4:].upper(), '.PNG') == 0:
        pass
    elif cmp(fn[-4:].upper(), '.BMP') == 0:
        pass
    else:
        return

    #获得基本的名字
    _tmpName = fn[:-4]
    fnRaw = toFnRaw(_tmpName)

    #获取各像素的RGB和长宽
    matrix,width,height = genMatrix4All(fnFull)

    #turn 90 degree clockwise
    newHeight = width
    newWidth = height
    newMatrix = []
    tmpLine = []
    for j in xrange(newHeight):
        tmpLine = []
        for i in xrange(newWidth):
            _tmpa = matrix[height - i -1][j]
            tmpLine.append(_tmpa)
        newMatrix.append(tmpLine)

    fOut.write("\n")

    #向bitmap.c写一个资源图片的头部
    fOut.write(gLineHeader%fnRaw)
    #向bitmap.c写一个资源图片的数据部分
    fOut.write("\n")
    for j in xrange(newHeight):
        for i in xrange(newWidth):
            r,g,b = newMatrix[j][i]
            a, b = rgb2m565Ex(b,g,r)
            __tmpS = ","
            if j == (newHeight - 1) and i == (newWidth - 1):
                __tmpS = ""
            fOut.write("0x%02x,0x%02x%s"%(a,b,__tmpS))
        fOut.write("\n")
    #向bitmap.c写一个资源图片的结尾部分
    fOut.write(gLineTailer)
    fOut.write("\n")

    #gFns搜集所有资源图片数据，留作生成imgRes.c/h用
    gFns.append((fnRaw, width, height))

def printdp(text, deep):
    """缩进打印"""
    print ' '*(deep*4),text

def walk(fn, deep):
    """目录遍历"""
    list =  os.listdir(fn)
    for line in list:
        fileDir = os.path.join(fn, line)
        if os.path.isdir(fileDir):
            printdp("In <"+fileDir+">...",deep)
            walk(fileDir, deep + 1)
        else:
            dealFn(fileDir, line, deep)


def runImageCfg():
    '''以image.cfg定义的文件路径和*顺序*逐一处理'''
    root_dir = os.getcwd()
    f_image_cfg = open("image.cfg","r")
    lines = f_image_cfg.readlines()
    for _line in lines:
        _line = _line.replace('\\','/')
        if len(_line)<= 2 or  cmp(_line[0:1],'#') == 0:
            continue
        if len(_line)>= 1 and cmp(_line[-1:],'\n') == 0:
            _line = _line[:-1]
        file_full_path = os.path.join(root_dir, _line)
        dealFn(file_full_path)
    f_image_cfg.close()
'''
rgb_2_m565()
从RGB到m565转换，结果是一个16bit整形数值。
m565的定义：B(5bit)G(6bit)R(5bit)


rgb2m565Ex()
将16bit的m565转化为两个char（8bit）格式。
并且是大端。
'''
def rgb2m565Ex(r,g,b):
    res = rgb_2_m565(r,g,b)
    a = res / 256
    b = res % 256
    return a, b

def rgb_2_m565(r,g,b):
    mb = b / 8
    mg = g / 4
    mr = r / 8
    m565 = mb * 2048 + mg * 32 + mr * 1
    return m565

"""主过程"""
if __name__ == '__main__':
    #bitmap.c
    fOut.write(gHeader)
    runImageCfg()

    fOut.write(gResHeader)
    i = 0
    for fnRaw,w,h in gFns:
        _tmpS = ","
        if i == (len(gFns) - 1):
            _tmpS = ""
        fOut.write(gResLine%(fnRaw, fnRaw.upper(), fnRaw, _tmpS))
        i = i + 1

    fOut.write(gResTailer)
    fOut.write(gTailer);

    fOut.truncate()
    fOut.flush()
    fOut.close()

    #imgRes.h/c
    fResC.write(gDefHeader)
    fResC.write("\n\n")
    for fnRaw, w, h in gFns:
        fResC.write(gDefLine%(fnRaw, w, h, w*2, fnRaw.upper()))
        fResC.write("\n")

    fResH.write(gDecHeader)
    fResH.write("\n\n")
    for fnRaw, w, h in gFns:
        fResH.write(gDecLine%(fnRaw))
    fResH.write("\n\n")
    fResH.write(gDecTailer)

    fResC.truncate()
    fResC.flush()
    fResC.close()
    fResH.truncate()
    fResH.flush()
    fResH.close()

    #raw_input("...Enter to exit...")

